{
  "version": 3,
  "sources": ["../../../../unprocessed/apps/admin/js/table.js"],
  "sourcesContent": ["class TableDefinition extends window.wagtailStreamField.blocks\n  .StructBlockDefinition {\n  render(placeholder, prefix, initialState, initialError) {\n    const block = super.render(placeholder, prefix, initialState, initialError);\n    const table = block.childBlocks.data;\n\n    // Create a new element with paste buttons.\n    const html = `\n        <div>\n            <label class=\"w-field__label\">\n                Paste from clipboard\n            </label>\n            <div class=\"w-field__wrapper data-field-wrapper\">\n                <button class=\"button button-small button-secondary paste-as-text\">\n                    Create as text\n                </button>\n                <button class=\"button button-small button-secondary paste-as-rich-text\">\n                    Create as rich text\n                </button>\n            </div>\n        </div>\n    `.trim();\n\n    const elem = document.createElement('template');\n    elem.innerHTML = html;\n\n    // Add the new buttons below the options block.\n    const optionsField = document.getElementById(prefix + '-options');\n    const optionsWrapper = optionsField.closest(\n      'div[data-contentpath=\"options\"]',\n    );\n\n    const inserted = optionsWrapper.parentNode.insertBefore(\n      elem.content.firstChild,\n      optionsWrapper.nextSibling,\n    );\n\n    // Add click handlers to the buttons.\n    const buttonText = inserted.querySelector('.paste-as-text');\n    buttonText.addEventListener('click', this.getClickHandler(table, 'text'));\n\n    const buttonRichText = inserted.querySelector('.paste-as-rich-text');\n    buttonRichText.addEventListener(\n      'click',\n      this.getClickHandler(table, 'rich_text'),\n    );\n\n    return block;\n  }\n\n  getClickHandler(table, cellType) {\n    const that = this;\n\n    return function (event) {\n      navigator.clipboard.readText().then((clipText) => {\n        that.pasteFromClipboard(clipText, table, cellType);\n      });\n      event.preventDefault();\n    };\n  }\n\n  pasteFromClipboard(clipText, table, cellType) {\n    const rows = (clipText || '')\n      .replace(/^\\n+|\\n+$/g, '')\n      .split('\\n')\n      .map((line) => line.split('\\t'));\n\n    const numColumns = rows[0].length;\n\n    // There needs to be at least 2 rows and 2 columns.\n    if (rows.length < 2 || numColumns < 2) {\n      return;\n    }\n\n    if (!rows.every((row) => row.length == numColumns)) {\n      return;\n    }\n\n    table.clear();\n\n    // First add headings, then add data.\n    const newColumn = table.childBlockDefsByName[cellType];\n\n    const converters = {\n      text: function (text) {\n        return text;\n      },\n      rich_text: this.convertTextToDraftail,\n    };\n\n    const converter = converters[cellType];\n\n    for (let i = 0; i < numColumns; i++) {\n      table.insertColumn(i, newColumn);\n      table.columns[i].headingInput.value = rows[0][i];\n    }\n\n    for (let i = 1; i < rows.length; i++) {\n      table.insertRow(i - 1);\n      for (let j = 0; j < numColumns; j++) {\n        table.rows[i - 1].blocks[j].setState(converter(rows[i][j]));\n      }\n    }\n  }\n\n  convertTextToDraftail(text) {\n    return window.Draftail.createEditorStateFromRaw({\n      blocks: [\n        {\n          type: 'unstyled',\n          depth: 0,\n          text: text,\n          inlineStyleRanges: [],\n          entityRanges: [],\n        },\n      ],\n      entityMap: {},\n    });\n  }\n}\n\nwindow.telepath.register('v1.atomic_elements.tables.Table', TableDefinition);\n"],
  "mappings": "MAAA,IAAMA,EAAN,cAA8B,OAAO,mBAAmB,OACrD,qBAAsB,CACvB,OAAOC,EAAaC,EAAQC,EAAcC,EAAc,CACtD,IAAMC,EAAQ,MAAM,OAAOJ,EAAaC,EAAQC,EAAcC,CAAY,EACpEE,EAAQD,EAAM,YAAY,KAG1BE,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcX,KAAK,EAEDC,EAAO,SAAS,cAAc,UAAU,EAC9CA,EAAK,UAAYD,EAIjB,IAAME,EADe,SAAS,eAAeP,EAAS,UAAU,EAC5B,QAClC,iCACF,EAEMQ,EAAWD,EAAe,WAAW,aACzCD,EAAK,QAAQ,WACbC,EAAe,WACjB,EAIA,OADmBC,EAAS,cAAc,gBAAgB,EAC/C,iBAAiB,QAAS,KAAK,gBAAgBJ,EAAO,MAAM,CAAC,EAEjDI,EAAS,cAAc,qBAAqB,EACpD,iBACb,QACA,KAAK,gBAAgBJ,EAAO,WAAW,CACzC,EAEOD,CACT,CAEA,gBAAgBC,EAAOK,EAAU,CAC/B,IAAMC,EAAO,KAEb,OAAO,SAAUC,EAAO,CACtB,UAAU,UAAU,SAAS,EAAE,KAAMC,GAAa,CAChDF,EAAK,mBAAmBE,EAAUR,EAAOK,CAAQ,CACnD,CAAC,EACDE,EAAM,eAAe,CACvB,CACF,CAEA,mBAAmBC,EAAUR,EAAOK,EAAU,CAC5C,IAAMI,GAAQD,GAAY,IACvB,QAAQ,aAAc,EAAE,EACxB,MAAM;AAAA,CAAI,EACV,IAAKE,GAASA,EAAK,MAAM,GAAI,CAAC,EAE3BC,EAAaF,EAAK,CAAC,EAAE,OAO3B,GAJIA,EAAK,OAAS,GAAKE,EAAa,GAIhC,CAACF,EAAK,MAAOG,GAAQA,EAAI,QAAUD,CAAU,EAC/C,OAGFX,EAAM,MAAM,EAGZ,IAAMa,EAAYb,EAAM,qBAAqBK,CAAQ,EAS/CS,EAPa,CACjB,KAAM,SAAUC,EAAM,CACpB,OAAOA,CACT,EACA,UAAW,KAAK,qBAClB,EAE6BV,CAAQ,EAErC,QAASW,EAAI,EAAGA,EAAIL,EAAYK,IAC9BhB,EAAM,aAAagB,EAAGH,CAAS,EAC/Bb,EAAM,QAAQgB,CAAC,EAAE,aAAa,MAAQP,EAAK,CAAC,EAAEO,CAAC,EAGjD,QAASA,EAAI,EAAGA,EAAIP,EAAK,OAAQO,IAAK,CACpChB,EAAM,UAAUgB,EAAI,CAAC,EACrB,QAASC,EAAI,EAAGA,EAAIN,EAAYM,IAC9BjB,EAAM,KAAKgB,EAAI,CAAC,EAAE,OAAOC,CAAC,EAAE,SAASH,EAAUL,EAAKO,CAAC,EAAEC,CAAC,CAAC,CAAC,CAE9D,CACF,CAEA,sBAAsBF,EAAM,CAC1B,OAAO,OAAO,SAAS,yBAAyB,CAC9C,OAAQ,CACN,CACE,KAAM,WACN,MAAO,EACP,KAAMA,EACN,kBAAmB,CAAC,EACpB,aAAc,CAAC,CACjB,CACF,EACA,UAAW,CAAC,CACd,CAAC,CACH,CACF,EAEA,OAAO,SAAS,SAAS,kCAAmCrB,CAAe",
  "names": ["TableDefinition", "placeholder", "prefix", "initialState", "initialError", "block", "table", "html", "elem", "optionsWrapper", "inserted", "cellType", "that", "event", "clipText", "rows", "line", "numColumns", "row", "newColumn", "converter", "text", "i", "j"]
}
