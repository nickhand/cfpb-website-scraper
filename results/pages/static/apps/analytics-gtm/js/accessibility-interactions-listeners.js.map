{
  "version": 3,
  "sources": ["../../../../../node_modules/@cfpb/cfpb-analytics/src/cfpb-analytics.js", "../../../../unprocessed/apps/analytics-gtm/js/util/analytics-util.js", "../../../../unprocessed/apps/analytics-gtm/js/accessibility-interactions-listeners.js"],
  "sourcesContent": ["/**\n * Log a message to the console if the `debug-gtm` URL parameter is set.\n * @param {string} msg - Message to load to the console.\n */\nfunction analyticsLog(...msg) {\n  // Check if URLSearchParams is supported (Chrome > 48; Edge > 16).\n  if (typeof window.URLSearchParams === 'function') {\n    // Get query params.\n    const queryParams = new URLSearchParams(window.location.search);\n    if (queryParams.get('debug-gtm') === 'true') {\n      // eslint-disable-next-line no-console\n      console.log(`ANALYTICS DEBUG MODE: ${msg}`);\n    }\n  }\n}\n\nlet loadTryCount = 0;\n\n/**\n * @returns {boolean} Whether GTM has been loaded or not.\n */\nfunction _isGtmLoaded() {\n  window.dataLayer = window.dataLayer || [];\n  const gtmStartedEvent = window.dataLayer.find(\n    (element) => element['gtm.start'],\n  );\n\n  if (!gtmStartedEvent) {\n    // Not even the GTM inline config has executed.\n    return false;\n  } else if (!gtmStartedEvent['gtm.uniqueEventId']) {\n    // GTM inline config has run, but the main GTM JS has not loaded.\n    return false;\n  }\n\n  // GTM is fully loaded and working.\n  return true;\n}\n\n/**\n * Poll every 0.5 seconds for 10 seconds for if Google Tag Manager has loaded.\n * @returns {Promise} Resolves if Google Tag Manager has loaded.\n *   Rejects if polling has completed.\n */\nfunction ensureGoogleTagManagerLoaded() {\n  return new Promise(function (resolve, reject) {\n    (function waitForGoogleTagManager() {\n      if (_isGtmLoaded()) return resolve();\n      if (++loadTryCount > 9) return reject();\n      setTimeout(waitForGoogleTagManager, 500);\n    })();\n  });\n}\n\n/**\n * @name analyticsSendEvent\n * @kind function\n * @description\n *   Pushes an event to the GTM dataLayer.\n *   This can accept arbitrary values, but traditionally (pre-GA4) would accept\n *   event, action, and label. Th eventCallback and eventTimeout values can also\n *   be sent, which are called if there's an issue loading GTM.\n * @param {object} payload - A list or a single event.\n * @param {string} payload.event - Type of event.\n * @param {string} payload.action - Name of event.\n * @param {string} payload.label - DOM element label.\n * @param {Function} [payload.eventCallback] - Function to call on GTM submission.\n * @param {number} [payload.eventTimeout] - Callback invocation fallback time.\n * @returns {Promise} Resolves if the event is sent,\n *   otherwise calls the callback if provided.\n */\nfunction analyticsSendEvent(payload) {\n  return ensureGoogleTagManagerLoaded()\n    .then(() => {\n      // GTM should be loaded at this point.\n      const printPayload = [];\n      Object.entries(payload).forEach(([key, value]) => {\n        printPayload.push(`(${key}: ${value})`);\n      });\n\n      analyticsLog(`Sending \"${printPayload.join(', ')}\"`);\n      window.dataLayer.push(payload);\n    })\n    .catch(() => {\n      if (\n        payload.eventCallback &&\n        typeof payload.eventCallback === 'function'\n      ) {\n        // eslint-disable-next-line callback-return\n        payload.eventCallback();\n      }\n    });\n}\n\nexport { analyticsSendEvent, analyticsLog };\n", "import { analyticsLog } from '@cfpb/cfpb-analytics';\n\n/**\n * Query a selector and add listeners to returned elements.\n * @param {string} selector - A dom selector.\n * @param {string} event - An event string, probably a \"MouseEvent.\"\n * @param {Function} callback - The event handler.\n */\nfunction addEventListenerToSelector(selector, event, callback) {\n  const elems = document.querySelectorAll(selector);\n  for (let i = 0, len = elems.length; i < len; i++) {\n    addEventListenerToElem(elems[i], event, callback);\n  }\n}\n\n/**\n * Check if an element exists on the page, and if it does, add listeners.\n * @param {HTMLElement} [elem] - The element to attach an event to.\n * @param {string} [event] - The event type string.\n * @param {Function} callback - Function to call when the event triggers.\n */\nfunction addEventListenerToElem(elem, event, callback) {\n  if (elem) {\n    elem.addEventListener(event, callback);\n  } else {\n    analyticsLog(`${elem} doesn't exist!`);\n  }\n}\n\n/**\n * Create a delay given a callback function and millisecond delay.\n * @class\n */\nfunction Delay() {\n  let timer = 0;\n  return function (callback, ms) {\n    clearTimeout(timer);\n    timer = setTimeout(callback, ms);\n  };\n}\n\nexport { addEventListenerToSelector, addEventListenerToElem, Delay };\n", "import { analyticsSendEvent } from '@cfpb/cfpb-analytics';\nimport { addEventListenerToElem } from './util/analytics-util';\n\n(() => {\n  /* Listen for focus on the \"skip link\" button. This will grab the top link.\n     Only the first link is needed since we're aiming to track users that use\n     the tab-key from the get-go for navigation. */\n  const skipLinkButton = document.querySelector('.skip-nav__link');\n  addEventListenerToElem(skipLinkButton, 'focus', () => {\n    analyticsSendEvent({\n      event: 'Accessibility Interactions',\n      action: 'Focus',\n      label: 'Skip link button',\n    });\n  });\n})();\n"],
  "mappings": "MAIA,SAASA,KAAgBC,EAAK,CAExB,OAAO,OAAO,iBAAoB,YAEhB,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAC9C,IAAI,WAAW,IAAM,QAEnC,QAAQ,IAAI,yBAAyBA,CAAG,EAAE,CAGhD,CAEA,IAAIC,EAAe,EAKnB,SAASC,GAAe,CACtB,OAAO,UAAY,OAAO,WAAa,CAAC,EACxC,IAAMC,EAAkB,OAAO,UAAU,KACtCC,GAAYA,EAAQ,WAAW,CAClC,EAEA,GAAKD,GAGE,GAAI,CAACA,EAAgB,mBAAmB,EAE7C,MAAO,OAHP,OAAO,GAOT,MAAO,EACT,CAOA,SAASE,GAA+B,CACtC,OAAO,IAAI,QAAQ,SAAUC,EAASC,EAAQ,EAC3C,SAASC,GAA0B,CAClC,GAAIN,EAAa,EAAG,OAAOI,EAAQ,EACnC,GAAI,EAAEL,EAAe,EAAG,OAAOM,EAAO,EACtC,WAAWC,EAAyB,GAAG,CACzC,GAAG,CACL,CAAC,CACH,CAmBA,SAASC,EAAmBC,EAAS,CACnC,OAAOL,EAA6B,EACjC,KAAK,IAAM,CAEV,IAAMM,EAAe,CAAC,EACtB,OAAO,QAAQD,CAAO,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAChDF,EAAa,KAAK,IAAIC,CAAG,KAAKC,CAAK,GAAG,CACxC,CAAC,EAEDd,EAAa,YAAYY,EAAa,KAAK,IAAI,CAAC,GAAG,EACnD,OAAO,UAAU,KAAKD,CAAO,CAC/B,CAAC,EACA,MAAM,IAAM,CAETA,EAAQ,eACR,OAAOA,EAAQ,eAAkB,YAGjCA,EAAQ,cAAc,CAE1B,CAAC,CACL,CCvEA,SAASI,EAAuBC,EAAMC,EAAOC,EAAU,CACjDF,EACFA,EAAK,iBAAiBC,EAAOC,CAAQ,EAErCC,EAAa,GAAGH,CAAI,iBAAiB,CAEzC,ECxBC,IAAM,CAIL,IAAMI,EAAiB,SAAS,cAAc,iBAAiB,EAC/DC,EAAuBD,EAAgB,QAAS,IAAM,CACpDE,EAAmB,CACjB,MAAO,6BACP,OAAQ,QACR,MAAO,kBACT,CAAC,CACH,CAAC,CACH,GAAG",
  "names": ["analyticsLog", "msg", "loadTryCount", "_isGtmLoaded", "gtmStartedEvent", "element", "ensureGoogleTagManagerLoaded", "resolve", "reject", "waitForGoogleTagManager", "analyticsSendEvent", "payload", "printPayload", "key", "value", "addEventListenerToElem", "elem", "event", "callback", "analyticsLog", "skipLinkButton", "addEventListenerToElem", "analyticsSendEvent"]
}
