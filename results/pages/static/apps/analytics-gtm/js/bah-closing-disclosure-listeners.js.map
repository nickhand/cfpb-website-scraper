{
  "version": 3,
  "sources": ["../../../../../node_modules/@cfpb/cfpb-analytics/src/cfpb-analytics.js", "../../../../unprocessed/apps/analytics-gtm/js/util/analytics-util.js", "../../../../unprocessed/apps/analytics-gtm/js/bah-explainers.js", "../../../../unprocessed/apps/analytics-gtm/js/bah-closing-disclosure-listeners.js"],
  "sourcesContent": ["/**\n * Log a message to the console if the `debug-gtm` URL parameter is set.\n * @param {string} msg - Message to load to the console.\n */\nfunction analyticsLog(...msg) {\n  // Check if URLSearchParams is supported (Chrome > 48; Edge > 16).\n  if (typeof window.URLSearchParams === 'function') {\n    // Get query params.\n    const queryParams = new URLSearchParams(window.location.search);\n    if (queryParams.get('debug-gtm') === 'true') {\n      // eslint-disable-next-line no-console\n      console.log(`ANALYTICS DEBUG MODE: ${msg}`);\n    }\n  }\n}\n\nlet loadTryCount = 0;\n\n/**\n * @returns {boolean} Whether GTM has been loaded or not.\n */\nfunction _isGtmLoaded() {\n  window.dataLayer = window.dataLayer || [];\n  const gtmStartedEvent = window.dataLayer.find(\n    (element) => element['gtm.start'],\n  );\n\n  if (!gtmStartedEvent) {\n    // Not even the GTM inline config has executed.\n    return false;\n  } else if (!gtmStartedEvent['gtm.uniqueEventId']) {\n    // GTM inline config has run, but the main GTM JS has not loaded.\n    return false;\n  }\n\n  // GTM is fully loaded and working.\n  return true;\n}\n\n/**\n * Poll every 0.5 seconds for 10 seconds for if Google Tag Manager has loaded.\n * @returns {Promise} Resolves if Google Tag Manager has loaded.\n *   Rejects if polling has completed.\n */\nfunction ensureGoogleTagManagerLoaded() {\n  return new Promise(function (resolve, reject) {\n    (function waitForGoogleTagManager() {\n      if (_isGtmLoaded()) return resolve();\n      if (++loadTryCount > 9) return reject();\n      setTimeout(waitForGoogleTagManager, 500);\n    })();\n  });\n}\n\n/**\n * @name analyticsSendEvent\n * @kind function\n * @description\n *   Pushes an event to the GTM dataLayer.\n *   This can accept arbitrary values, but traditionally (pre-GA4) would accept\n *   event, action, and label. Th eventCallback and eventTimeout values can also\n *   be sent, which are called if there's an issue loading GTM.\n * @param {object} payload - A list or a single event.\n * @param {string} payload.event - Type of event.\n * @param {string} payload.action - Name of event.\n * @param {string} payload.label - DOM element label.\n * @param {Function} [payload.eventCallback] - Function to call on GTM submission.\n * @param {number} [payload.eventTimeout] - Callback invocation fallback time.\n * @returns {Promise} Resolves if the event is sent,\n *   otherwise calls the callback if provided.\n */\nfunction analyticsSendEvent(payload) {\n  return ensureGoogleTagManagerLoaded()\n    .then(() => {\n      // GTM should be loaded at this point.\n      const printPayload = [];\n      Object.entries(payload).forEach(([key, value]) => {\n        printPayload.push(`(${key}: ${value})`);\n      });\n\n      analyticsLog(`Sending \"${printPayload.join(', ')}\"`);\n      window.dataLayer.push(payload);\n    })\n    .catch(() => {\n      if (\n        payload.eventCallback &&\n        typeof payload.eventCallback === 'function'\n      ) {\n        // eslint-disable-next-line callback-return\n        payload.eventCallback();\n      }\n    });\n}\n\nexport { analyticsSendEvent, analyticsLog };\n", "import { analyticsLog } from '@cfpb/cfpb-analytics';\n\n/**\n * Query a selector and add listeners to returned elements.\n * @param {string} selector - A dom selector.\n * @param {string} event - An event string, probably a \"MouseEvent.\"\n * @param {Function} callback - The event handler.\n */\nfunction addEventListenerToSelector(selector, event, callback) {\n  const elems = document.querySelectorAll(selector);\n  for (let i = 0, len = elems.length; i < len; i++) {\n    addEventListenerToElem(elems[i], event, callback);\n  }\n}\n\n/**\n * Check if an element exists on the page, and if it does, add listeners.\n * @param {HTMLElement} [elem] - The element to attach an event to.\n * @param {string} [event] - The event type string.\n * @param {Function} callback - Function to call when the event triggers.\n */\nfunction addEventListenerToElem(elem, event, callback) {\n  if (elem) {\n    elem.addEventListener(event, callback);\n  } else {\n    analyticsLog(`${elem} doesn't exist!`);\n  }\n}\n\n/**\n * Create a delay given a callback function and millisecond delay.\n * @class\n */\nfunction Delay() {\n  let timer = 0;\n  return function (callback, ms) {\n    clearTimeout(timer);\n    timer = setTimeout(callback, ms);\n  };\n}\n\nexport { addEventListenerToSelector, addEventListenerToElem, Delay };\n", "import { analyticsSendEvent } from '@cfpb/cfpb-analytics';\nimport { addEventListenerToSelector } from './util/analytics-util';\n\n/*\nBuying a House /owning-a-home/loan-estimate/\nBuying a House /owning-a-home/closing-disclosure/\n*/\n\n/**\n * @param {string} label - The label to pass off to analytics.\n */\nexport default function (label) {\n  const trackingLabel = `${label} Interaction`;\n\n  const expandableStates = {};\n  let lastExpandable;\n\n  /**\n   * Record state (expanded or collapsed) of expandables.\n   * @param {string} id - The unique HTML ID of an expandable.\n   */\n  function recordExpandableState(id) {\n    if (!expandableStates[id]) {\n      expandableStates[id] = true;\n    } else if (lastExpandable === id) {\n      expandableStates[id] = !expandableStates[id];\n    }\n    lastExpandable = id;\n  }\n\n  /**\n   * Record state (expanded or collapsed) of expandables.\n   * @param {HTMLElement} expandable - An expandable HTML element.\n   * @returns {boolean} True if the expandable is animating, false otherwise.\n   */\n  function isAnimatingExpandable(expandable) {\n    let isAnimating = false;\n\n    if (\n      expandable.classList.contains('o-expandable__expanding') ||\n      expandable.classList.contains('o-expandable__collapsing')\n    ) {\n      isAnimating = true;\n    }\n\n    return isAnimating;\n  }\n\n  /**\n   * @param {MouseEvent} event - Mouse event from the click.\n   */\n  function trackFormExplainerPageLinkClick(event) {\n    const target = event.target;\n    const pageNumber = 'Page ' + target.getAttribute('data-page');\n    analyticsSendEvent({\n      event: trackingLabel,\n      action: 'Page link click',\n      label: pageNumber,\n    });\n  }\n\n  /**\n   * @param {MouseEvent} event - Mouse event from the click.\n   */\n  function trackFormExplainerPageButtonClick(event) {\n    const target = event.currentTarget;\n    const currentPageDom = document.querySelector(\n      '.form-explainer__page-link.current-page',\n    );\n    const currentPage = 'Page ' + currentPageDom.getAttribute('data-page');\n    let action = 'Next Page button clicked';\n    if (target.classList.contains('prev')) {\n      action = 'Previous Page button clicked';\n    }\n    analyticsSendEvent({ event: trackingLabel, action, label: currentPage });\n  }\n\n  /**\n   * @param {MouseEvent} event - Mouse event from the click.\n   */\n  function trackExpandableTargetsClick(event) {\n    const elem = event.currentTarget;\n    const expandable = elem.parentNode;\n    const expandableID = expandable.id;\n    if (isAnimatingExpandable(expandable)) {\n      return;\n    }\n    recordExpandableState(expandableID);\n\n    let action = 'Expandable collapsed';\n    const label = elem.querySelector('.o-expandable__label');\n    const text = label.textContent.trim();\n    if (expandableStates[expandableID] === true) {\n      action = 'Expandable expanded';\n    }\n    analyticsSendEvent({ event: trackingLabel, action, label: text });\n  }\n\n  /**\n   * @param {MouseEvent} event - Mouse event from the click.\n   */\n  function trackImageMapOverlayClick(event) {\n    const target = event.target;\n    const href = target.getAttribute('href');\n    const text = target.textContent.trim();\n\n    let action = 'Image Overlay click - expandable collapsed';\n    const expandable = document.querySelector(href);\n    const expandableID = expandable.id;\n    if (isAnimatingExpandable(expandable)) {\n      return;\n    }\n    recordExpandableState(expandableID);\n    if (expandableStates[expandableID] === true) {\n      action = 'Image Overlay click - expandable expanded';\n    }\n    analyticsSendEvent({ event: trackingLabel, action, label: text });\n  }\n\n  addEventListenerToSelector(\n    '.form-explainer__page-link',\n    'click',\n    trackFormExplainerPageLinkClick,\n  );\n  addEventListenerToSelector(\n    '.form-explainer__page-buttons button',\n    'click',\n    trackFormExplainerPageButtonClick,\n  );\n  addEventListenerToSelector(\n    '.o-expandable__header',\n    'mouseup',\n    trackExpandableTargetsClick,\n  );\n  addEventListenerToSelector(\n    '.image-map__overlay',\n    'click',\n    trackImageMapOverlayClick,\n  );\n}\n", "import bahExplainers from './bah-explainers';\n\n// Buying a House /owning-a-home/closing-disclosure/\n\n(() => {\n  bahExplainers('OAH Closing Disclosure');\n})();\n"],
  "mappings": "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",
  "names": ["analyticsLog", "msg", "loadTryCount", "_isGtmLoaded", "gtmStartedEvent", "element", "ensureGoogleTagManagerLoaded", "resolve", "reject", "waitForGoogleTagManager", "analyticsSendEvent", "payload", "printPayload", "key", "value", "addEventListenerToSelector", "selector", "event", "callback", "elems", "i", "len", "addEventListenerToElem", "elem", "analyticsLog", "bah_explainers_default", "label", "trackingLabel", "expandableStates", "lastExpandable", "recordExpandableState", "id", "isAnimatingExpandable", "expandable", "isAnimating", "trackFormExplainerPageLinkClick", "event", "pageNumber", "analyticsSendEvent", "trackFormExplainerPageButtonClick", "target", "currentPage", "action", "trackExpandableTargetsClick", "elem", "expandableID", "text", "trackImageMapOverlayClick", "href", "addEventListenerToSelector", "bah_explainers_default"]
}
