{
  "version": 3,
  "sources": ["../../../../../node_modules/@cfpb/cfpb-analytics/src/cfpb-analytics.js", "../../../../unprocessed/apps/analytics-gtm/js/enterprise-hash-url-listener.js"],
  "sourcesContent": ["/**\n * Log a message to the console if the `debug-gtm` URL parameter is set.\n * @param {string} msg - Message to load to the console.\n */\nfunction analyticsLog(...msg) {\n  // Check if URLSearchParams is supported (Chrome > 48; Edge > 16).\n  if (typeof window.URLSearchParams === 'function') {\n    // Get query params.\n    const queryParams = new URLSearchParams(window.location.search);\n    if (queryParams.get('debug-gtm') === 'true') {\n      // eslint-disable-next-line no-console\n      console.log(`ANALYTICS DEBUG MODE: ${msg}`);\n    }\n  }\n}\n\nlet loadTryCount = 0;\n\n/**\n * @returns {boolean} Whether GTM has been loaded or not.\n */\nfunction _isGtmLoaded() {\n  window.dataLayer = window.dataLayer || [];\n  const gtmStartedEvent = window.dataLayer.find(\n    (element) => element['gtm.start'],\n  );\n\n  if (!gtmStartedEvent) {\n    // Not even the GTM inline config has executed.\n    return false;\n  } else if (!gtmStartedEvent['gtm.uniqueEventId']) {\n    // GTM inline config has run, but the main GTM JS has not loaded.\n    return false;\n  }\n\n  // GTM is fully loaded and working.\n  return true;\n}\n\n/**\n * Poll every 0.5 seconds for 10 seconds for if Google Tag Manager has loaded.\n * @returns {Promise} Resolves if Google Tag Manager has loaded.\n *   Rejects if polling has completed.\n */\nfunction ensureGoogleTagManagerLoaded() {\n  return new Promise(function (resolve, reject) {\n    (function waitForGoogleTagManager() {\n      if (_isGtmLoaded()) return resolve();\n      if (++loadTryCount > 9) return reject();\n      setTimeout(waitForGoogleTagManager, 500);\n    })();\n  });\n}\n\n/**\n * @name analyticsSendEvent\n * @kind function\n * @description\n *   Pushes an event to the GTM dataLayer.\n *   This can accept arbitrary values, but traditionally (pre-GA4) would accept\n *   event, action, and label. Th eventCallback and eventTimeout values can also\n *   be sent, which are called if there's an issue loading GTM.\n * @param {object} payload - A list or a single event.\n * @param {string} payload.event - Type of event.\n * @param {string} payload.action - Name of event.\n * @param {string} payload.label - DOM element label.\n * @param {Function} [payload.eventCallback] - Function to call on GTM submission.\n * @param {number} [payload.eventTimeout] - Callback invocation fallback time.\n * @returns {Promise} Resolves if the event is sent,\n *   otherwise calls the callback if provided.\n */\nfunction analyticsSendEvent(payload) {\n  return ensureGoogleTagManagerLoaded()\n    .then(() => {\n      // GTM should be loaded at this point.\n      const printPayload = [];\n      Object.entries(payload).forEach(([key, value]) => {\n        printPayload.push(`(${key}: ${value})`);\n      });\n\n      analyticsLog(`Sending \"${printPayload.join(', ')}\"`);\n      window.dataLayer.push(payload);\n    })\n    .catch(() => {\n      if (\n        payload.eventCallback &&\n        typeof payload.eventCallback === 'function'\n      ) {\n        // eslint-disable-next-line callback-return\n        payload.eventCallback();\n      }\n    });\n}\n\nexport { analyticsSendEvent, analyticsLog };\n", "import { analyticsSendEvent } from '@cfpb/cfpb-analytics';\n\n(function () {\n  let action =\n    window.location.pathname + window.location.search + window.location.hash;\n  action = action.replace('#', 'GA_HASHTAG');\n  const label = document.title;\n\n  analyticsSendEvent({ event: 'Virtual Pageview', action, label });\n})();\n"],
  "mappings": "MAIA,SAASA,KAAgBC,EAAK,CAExB,OAAO,OAAO,iBAAoB,YAEhB,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAC9C,IAAI,WAAW,IAAM,QAEnC,QAAQ,IAAI,yBAAyBA,CAAG,EAAE,CAGhD,CAEA,IAAIC,EAAe,EAKnB,SAASC,GAAe,CACtB,OAAO,UAAY,OAAO,WAAa,CAAC,EACxC,IAAMC,EAAkB,OAAO,UAAU,KACtCC,GAAYA,EAAQ,WAAW,CAClC,EAEA,GAAKD,GAGE,GAAI,CAACA,EAAgB,mBAAmB,EAE7C,MAAO,OAHP,OAAO,GAOT,MAAO,EACT,CAOA,SAASE,GAA+B,CACtC,OAAO,IAAI,QAAQ,SAAUC,EAASC,EAAQ,EAC3C,SAASC,GAA0B,CAClC,GAAIN,EAAa,EAAG,OAAOI,EAAQ,EACnC,GAAI,EAAEL,EAAe,EAAG,OAAOM,EAAO,EACtC,WAAWC,EAAyB,GAAG,CACzC,GAAG,CACL,CAAC,CACH,CAmBA,SAASC,EAAmBC,EAAS,CACnC,OAAOL,EAA6B,EACjC,KAAK,IAAM,CAEV,IAAMM,EAAe,CAAC,EACtB,OAAO,QAAQD,CAAO,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAChDF,EAAa,KAAK,IAAIC,CAAG,KAAKC,CAAK,GAAG,CACxC,CAAC,EAEDd,EAAa,YAAYY,EAAa,KAAK,IAAI,CAAC,GAAG,EACnD,OAAO,UAAU,KAAKD,CAAO,CAC/B,CAAC,EACA,MAAM,IAAM,CAETA,EAAQ,eACR,OAAOA,EAAQ,eAAkB,YAGjCA,EAAQ,cAAc,CAE1B,CAAC,CACL,EC1FC,UAAY,CACX,IAAII,EACF,OAAO,SAAS,SAAW,OAAO,SAAS,OAAS,OAAO,SAAS,KACtEA,EAASA,EAAO,QAAQ,IAAK,YAAY,EACzC,IAAMC,EAAQ,SAAS,MAEvBC,EAAmB,CAAE,MAAO,mBAAoB,OAAAF,EAAQ,MAAAC,CAAM,CAAC,CACjE,GAAG",
  "names": ["analyticsLog", "msg", "loadTryCount", "_isGtmLoaded", "gtmStartedEvent", "element", "ensureGoogleTagManagerLoaded", "resolve", "reject", "waitForGoogleTagManager", "analyticsSendEvent", "payload", "printPayload", "key", "value", "action", "label", "analyticsSendEvent"]
}
