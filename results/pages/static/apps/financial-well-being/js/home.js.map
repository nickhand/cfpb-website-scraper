{
  "version": 3,
  "sources": ["../../../../../node_modules/@cfpb/cfpb-analytics/src/cfpb-analytics.js", "../../../../unprocessed/apps/financial-well-being/js/fwb-questions.js", "../../../../unprocessed/apps/financial-well-being/js/home.js"],
  "sourcesContent": ["/**\n * Log a message to the console if the `debug-gtm` URL parameter is set.\n * @param {string} msg - Message to load to the console.\n */\nfunction analyticsLog(...msg) {\n  // Check if URLSearchParams is supported (Chrome > 48; Edge > 16).\n  if (typeof window.URLSearchParams === 'function') {\n    // Get query params.\n    const queryParams = new URLSearchParams(window.location.search);\n    if (queryParams.get('debug-gtm') === 'true') {\n      // eslint-disable-next-line no-console\n      console.log(`ANALYTICS DEBUG MODE: ${msg}`);\n    }\n  }\n}\n\nlet loadTryCount = 0;\n\n/**\n * @returns {boolean} Whether GTM has been loaded or not.\n */\nfunction _isGtmLoaded() {\n  window.dataLayer = window.dataLayer || [];\n  const gtmStartedEvent = window.dataLayer.find(\n    (element) => element['gtm.start'],\n  );\n\n  if (!gtmStartedEvent) {\n    // Not even the GTM inline config has executed.\n    return false;\n  } else if (!gtmStartedEvent['gtm.uniqueEventId']) {\n    // GTM inline config has run, but the main GTM JS has not loaded.\n    return false;\n  }\n\n  // GTM is fully loaded and working.\n  return true;\n}\n\n/**\n * Poll every 0.5 seconds for 10 seconds for if Google Tag Manager has loaded.\n * @returns {Promise} Resolves if Google Tag Manager has loaded.\n *   Rejects if polling has completed.\n */\nfunction ensureGoogleTagManagerLoaded() {\n  return new Promise(function (resolve, reject) {\n    (function waitForGoogleTagManager() {\n      if (_isGtmLoaded()) return resolve();\n      if (++loadTryCount > 9) return reject();\n      setTimeout(waitForGoogleTagManager, 500);\n    })();\n  });\n}\n\n/**\n * @name analyticsSendEvent\n * @kind function\n * @description\n *   Pushes an event to the GTM dataLayer.\n *   This can accept arbitrary values, but traditionally (pre-GA4) would accept\n *   event, action, and label. Th eventCallback and eventTimeout values can also\n *   be sent, which are called if there's an issue loading GTM.\n * @param {object} payload - A list or a single event.\n * @param {string} payload.event - Type of event.\n * @param {string} payload.action - Name of event.\n * @param {string} payload.label - DOM element label.\n * @param {Function} [payload.eventCallback] - Function to call on GTM submission.\n * @param {number} [payload.eventTimeout] - Callback invocation fallback time.\n * @returns {Promise} Resolves if the event is sent,\n *   otherwise calls the callback if provided.\n */\nfunction analyticsSendEvent(payload) {\n  return ensureGoogleTagManagerLoaded()\n    .then(() => {\n      // GTM should be loaded at this point.\n      const printPayload = [];\n      Object.entries(payload).forEach(([key, value]) => {\n        printPayload.push(`(${key}: ${value})`);\n      });\n\n      analyticsLog(`Sending \"${printPayload.join(', ')}\"`);\n      window.dataLayer.push(payload);\n    })\n    .catch(() => {\n      if (\n        payload.eventCallback &&\n        typeof payload.eventCallback === 'function'\n      ) {\n        // eslint-disable-next-line callback-return\n        payload.eventCallback();\n      }\n    });\n}\n\nexport { analyticsSendEvent, analyticsLog };\n", "import { analyticsSendEvent } from '@cfpb/cfpb-analytics';\n\nlet questionsDom;\nlet radiosDom;\nlet submitDom;\nlet questionStates;\n\n/**\n * Checks the selection status of a group of radio inputs,\n * belonging to a parent fieldset\n * @param {HTMLElement} childRadios - An array of DOM elements.\n * @returns {boolean} The status of the group of inputs\n */\nfunction checkQuestionState(childRadios) {\n  let radioIsChecked = false;\n  const radiosLength = childRadios.length;\n\n  for (let i = 0; i < radiosLength; i++) {\n    if (childRadios[i].checked) {\n      radioIsChecked = true;\n    }\n  }\n\n  return radioIsChecked;\n}\n\n/**\n * Checks the status of each fieldset to determine if\n * the user has completed the form\n * @returns {boolean} The completion status of the form\n */\nfunction checkFormCompletion() {\n  let formCompleted = true;\n\n  Object.keys(questionStates).forEach((key) => {\n    if (!questionStates[key]) {\n      formCompleted = false;\n    }\n  });\n\n  return formCompleted;\n}\n\n/**\n * Event handler to prevent clicking the submit button before\n * the form is completed\n * @param {object} event - The event object for the click event.\n */\nfunction handleDisabledSubmit(event) {\n  event.preventDefault();\n}\n\n/**\n * Sets the disabled state of the submit button\n */\nfunction disableSubmit() {\n  submitDom.disabled = true;\n  submitDom.addEventListener('click', handleDisabledSubmit);\n}\n\n/**\n * Sets the enabled state of the submit button\n */\nfunction enableSubmit() {\n  submitDom.title = 'Get your score';\n  submitDom.disabled = false;\n  submitDom.removeEventListener('click', handleDisabledSubmit);\n  submitDom.addEventListener('click', (evt) => handleAnalytics(evt.target));\n}\n\n/**\n * Updates the status of the fieldset in the data store\n * and checks if the form has been completed\n * @param {HTMLElement} input - A DOM element\n */\nfunction handleRadio(input) {\n  if (input.name && input.checked) {\n    questionStates[input.name] = true;\n  }\n\n  if (checkFormCompletion()) {\n    enableSubmit();\n  }\n}\n\n/**\n * Grabs analytics event data from the passed element's data attributes.\n * Determines the state of the Analytics module and either passes the data\n * or waits for Analytics to report readiness, then passes the data.\n * @param {HTMLElement} el - A DOM element\n */\nfunction handleAnalytics(el) {\n  const event = el.getAttribute('data-gtm-category');\n  const action = el.getAttribute('data-gtm-action');\n  const label = el.getAttribute('data-gtm-label');\n\n  analyticsSendEvent({ event, action, label });\n}\n\n/**\n * Event handler to watch user interaction on each input\n */\nfunction setUpListeners() {\n  [].forEach.call(radiosDom, function (el) {\n    el.addEventListener('click', function (event) {\n      const input = event.target;\n\n      handleRadio(input);\n      handleAnalytics(input);\n    });\n  });\n}\n\n/**\n * Initializes a data store from the initial state of each fieldset\n */\nfunction setUpData() {\n  const questionsLength = questionsDom.length;\n\n  for (let i = 0; i < questionsLength; i++) {\n    const questionID = questionsDom[i].id;\n    const childRadios = document.querySelectorAll('#' + questionID + ' input');\n\n    questionStates[questionID] = checkQuestionState(childRadios);\n  }\n}\n\n/**\n * Determines the state of the form and modifies the UI appropriately\n */\nfunction setUpUI() {\n  if (checkFormCompletion()) {\n    // Enable submit button initially if the answers are completed\n    enableSubmit();\n  } else {\n    // Otherwise disable submit button initially\n    disableSubmit();\n  }\n\n  setUpListeners();\n}\n\n/**\n * Initialize the questionnaire\n */\nfunction init() {\n  questionsDom = document.querySelectorAll('#quiz-form fieldset');\n  radiosDom = document.querySelectorAll('#quiz-form [type=\"radio\"]');\n  submitDom = document.querySelector('#submit-quiz');\n  questionStates = {};\n\n  setUpData();\n  setUpUI();\n}\n\nexport default { init };\n", "import fwbQuestions from './fwb-questions.js';\nfwbQuestions.init();\n"],
  "mappings": "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",
  "names": ["analyticsLog", "msg", "loadTryCount", "_isGtmLoaded", "gtmStartedEvent", "element", "ensureGoogleTagManagerLoaded", "resolve", "reject", "waitForGoogleTagManager", "analyticsSendEvent", "payload", "printPayload", "key", "value", "questionsDom", "radiosDom", "submitDom", "questionStates", "checkQuestionState", "childRadios", "radioIsChecked", "radiosLength", "checkFormCompletion", "formCompleted", "key", "handleDisabledSubmit", "event", "disableSubmit", "enableSubmit", "evt", "handleAnalytics", "handleRadio", "input", "el", "action", "label", "analyticsSendEvent", "setUpListeners", "setUpData", "questionsLength", "i", "questionID", "setUpUI", "init", "fwb_questions_default", "fwb_questions_default"]
}
